package com.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.model.Company;
import com.utils.ConnectionPool;

public class CompaniesDBDAO implements CompaniesDAO {

	private ConnectionPool connectionPool = ConnectionPool.getInstance();

	public boolean isCompanyExists(String email, String password) {
		Connection con = connectionPool.getConnection();
		String sqlQuery = "SELECT * FROM COMPANIES WHERE EMAIL like ? AND PASSWORD like ?";
		boolean flag = false;
		try {
			PreparedStatement ps = con.prepareStatement(sqlQuery);
			ps.setString(1, email);
			ps.setString(2, password);
			ResultSet resultSet = ps.executeQuery();
			flag = resultSet.next();
			ps.close();
			resultSet.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		connectionPool.restoreConnection(con);
		return flag;
	}

	@Override
	public void addCompany(Company company) {
		
		Connection con = connectionPool.getConnection();
		String sqlQuery = "INSERT INTO COMPANIES VALUES (?,?,?)";
		try {
			PreparedStatement ps = con.prepareStatement(sqlQuery);
			ps.setString(1, company.getName());
			ps.setString(2, company.getEmail());
			ps.setString(3, company.getPassword());

			ps.execute();
			ps.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("6");
		connectionPool.restoreConnection(con);
		System.out.println("7");
	}

	@Override
	public void updateCompany(Company company) {
		Connection con = connectionPool.getConnection();
		String sqlQuery = "UPDATE COMPANIES SET EMAIL = ?, PASSWORD = ? WHERE ID = ?";
		try {
			PreparedStatement ps = con.prepareStatement(sqlQuery);

			ps.setString(1, company.getEmail());
			ps.setString(2, company.getPassword());
			ps.setInt(3, company.getId());

			ps.execute();
			ps.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		connectionPool.restoreConnection(con);

	}

	@Override
	public void deleteCompany(int id) {
		Connection con = connectionPool.getConnection();
		String sqlQuery = "DELETE FROM COMPANIES WHERE WHERE ID = ?";

		try {
			PreparedStatement ps = con.prepareStatement(sqlQuery);
			ps.setInt(1, id);

			ps.execute();
			ps.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		connectionPool.restoreConnection(con);

	}

	@Override
	public ArrayList<Company> getAllCompanies() {
		Connection con = connectionPool.getConnection();
		String sqlQuery = "SELECT * FROM COMPANIES";
		ArrayList<Company> companies = new ArrayList<Company>();

		try {

			ResultSet resultSet = con.createStatement().executeQuery(sqlQuery);
			if (resultSet.next()) {
				companies.add(
						new Company(resultSet.getInt("ID"), resultSet.getString("NAME"), resultSet.getString("EMAIL"),
								resultSet.getString("PASSWORD"), getOneCompany(resultSet.getInt("ID")).getCoupons()));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		connectionPool.restoreConnection(con);
		return companies;
	}

	@Override
	public Company getOneCompany(int id) {
		Connection con = connectionPool.getConnection();
		String sqlQuery = "SELECT * FROM COMPANIES WHERE ID = ?";

		try {
			PreparedStatement ps = con.prepareStatement(sqlQuery);
			ps.setInt(1, id);
			ResultSet resultSet = ps.executeQuery();
			if (resultSet.next()) {
				connectionPool.restoreConnection(con);
				return new Company(resultSet.getInt("ID"), resultSet.getString("NAME"), resultSet.getString("EMAIL"),
						resultSet.getString("PASSWORD"), getOneCompany(resultSet.getInt("ID")).getCoupons());
			}
			resultSet.close();
			ps.close();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		connectionPool.restoreConnection(con);
		return null;
	}

	@Override
	public int getCompanyId(String email) {
		Connection con = connectionPool.getConnection();
		int res = -1;
		try {
			PreparedStatement pst = con.prepareStatement("SELECT * FROM Companies WHERE EMAIL = ?");
			pst.setString(1, email);
			ResultSet rs = pst.executeQuery();
			if (rs.next()) {
				res = rs.getInt("ID");
			}
			rs.close();
			pst.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		connectionPool.restoreConnection(con);
		return res;
	}

}
